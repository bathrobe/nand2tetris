// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
        Not16(in=x,out=notx);
        Add16(a=x,b=notx,out=allones);
        Not16(in=allones,out=allzeros);
        Mux16(a=x,b=allzeros,sel=zx,out=zxdone);
        Not16(in=zxdone,out=nxdone);
        Mux16(a=zxdone, b=nxdone, sel=nx, out=xready);
        Not16(in=y,out=noty);
        Mux16(a=y,b=allzeros,sel=zy,out=zydone);
        Not16(in=zydone,out=nydone);
        Mux16(a=zydone,b=nydone,sel=ny,out=yready);
        And16(a=xready,b=yready,out=xandy);
        Add16(a=xready,b=yready,out=xplusy);
        Mux16(a=xandy,b=xplusy,sel=f,out=fdone);
        Not16(in=fdone,out=nodone);
        Mux16(a=fdone,b=nodone,sel=no,out=out, out=ztest, out=ntest);
        And16(a=ztest,b=ztest,out[0..7]=firsthalffinal, out[8..15]=secondhalffinal);
        Or8Way(in=firsthalffinal,out=zrfirst);
        Or8Way(in=secondhalffinal,out=zrsecond);
        Or(a=zrfirst,b=zrsecond,out=notzr);
        Not(in=notzr, out=zr);
        And16(a=ntest,b=ntest,out[15]=ng);

}
